open Graphjs_mdg

module Cwe = struct
  type t =
    | CWE22
    | CWE78
    | CWE94
    | CWE1321

  let of_sink (sink : Taint.Sink.t) : t =
    match sink.kind with
    | `CodeInjection -> CWE94
    | `CommandInjection -> CWE78
    | `PathTraversal -> CWE22

  let pp (ppf : Fmt.t) (cwe : t) : unit =
    match cwe with
    | CWE22 -> Fmt.fmt ppf "CWE-22"
    | CWE78 -> Fmt.fmt ppf "CWE-78"
    | CWE94 -> Fmt.fmt ppf "CWE-94"
    | CWE1321 -> Fmt.fmt ppf "CWE-1321"

  let str (cwe : t) : string = Fmt.str "%a" pp cwe
end

type t =
  { cwe : Cwe.t
  ; node : Node.t
  ; file : string
  ; line : int
  }

let create (cwe : Cwe.t) (node : Node.t) (file : string) (line : int) : t =
  { cwe; node; file; line }

let tainted (node : Node.t) (sink : Taint.Sink.t) : t =
  create (Cwe.of_sink sink) node node.at.file node.at.lpos.line

let pollution (node : Node.t) : t =
  create CWE1321 node node.at.file node.at.lpos.line

let hash (vuln : t) : int = Node.hash vuln.node
let equal (vuln1 : t) (vuln2 : t) : bool = Node.equal vuln1.node vuln2.node
let compare (vuln1 : t) (vuln2 : t) : int = Node.compare vuln1.node vuln2.node

let pp (ppf : Fmt.t) (vuln : t) : unit =
  Fmt.fmt ppf "{@\n@[<v 2>  ";
  Fmt.fmt ppf "\"cwe\": \"%a\"," Cwe.pp vuln.cwe;
  Fmt.fmt ppf "@\n\"file\": %S," vuln.node.at.file;
  Fmt.fmt ppf "@\n\"line\": %d" vuln.line;
  Fmt.fmt ppf "@]@\n}"

let str (vuln : t) : string = Fmt.str "%a" pp vuln

module Set = struct
  include Set.Make (struct
    type elt = t

    let compare = compare
  end)

  let pp_json (ppf : Fmt.t) (vulns : t) : unit =
    Fmt.fmt ppf "[@\n@[<v 2>  %a@]@\n]" Fmt.(pp_iter iter !>",@\n" pp) vulns

  let str_json (vulns : t) : string = Fmt.str "%a" pp_json vulns

  let pp (path : Fpath.t) (ppf : Fmt.t) (vulns : t) : unit =
    if cardinal vulns > 0 then pp_json ppf vulns
    else Fmt.fmt ppf "No vulnerabilities detected in \"%a\"." Fpath.pp path

  let str (path : Fpath.t) (vulns : t) : string = Fmt.str "%a" (pp path) vulns
end
