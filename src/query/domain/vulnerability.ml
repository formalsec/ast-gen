open Graphjs_base
open Graphjs_share
open Graphjs_mdg

type t =
  { node : Node.t
  ; sink : Taint.sink
  ; line : int
  }

let create (node : Node.t) (sink : Taint.sink) (line : int) : t =
  { node; sink; line }

let of_node (node : Node.t) (sink : Taint.sink) : t =
  let line = node.at.lpos.line in
  create node sink line

let hash (vuln : t) : int = Node.hash vuln.node
let equal (vuln1 : t) (vuln2 : t) : bool = Node.equal vuln1.node vuln2.node
let compare (vuln1 : t) (vuln2 : t) : int = Node.compare vuln1.node vuln2.node

let pp (ppf : Fmt.t) (vuln : t) : unit =
  Fmt.fmt ppf "{@\n@[<v 2>  ";
  Fmt.fmt ppf "\"vuln_type\": \"%a\"" Sink_kind.pp vuln.sink.kind;
  Fmt.fmt ppf "@\n\"sink\": %S" vuln.sink.name;
  Fmt.fmt ppf "@\n\"sink_lineno\": %d@]" vuln.line;
  Fmt.fmt ppf "@\n}"

let str (vuln : t) : string = Fmt.str "%a" pp vuln

module Set = struct
  include Set.Make (struct
    type elt = t

    let compare = compare
  end)

  let pp (path : Fpath.t) (ppf : Fmt.t) (vulns : t) : unit =
    if cardinal vulns > 0 then Fmt.(pp_iter iter !>"@\n" pp) ppf vulns
    else Fmt.fmt ppf "No vulnerabilities detected in \"%a\"." Fpath.pp path

  let str (path : Fpath.t) (vulns : t) : string = Fmt.str "%a" (pp path) vulns
end
