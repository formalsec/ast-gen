  $ graphjs analyze injection_call_1.js
  {
    "vuln_type": "code-injection"
    "sink": "eval"
    "sink_lineno": 8
  }

  $ graphjs analyze injection_call_2.js
  {
    "vuln_type": "code-injection"
    "sink": "eval"
    "sink_lineno": 8
  }

  $ graphjs analyze injection_call_3.js
  No vulnerabilities detected in "injection_call_3.js".

  $ graphjs analyze injection_call_4.js
  No vulnerabilities detected in "injection_call_4.js".

  $ graphjs analyze injection_call_5.js
  {
    "vuln_type": "code-injection"
    "sink": "eval"
    "sink_lineno": 10
  }

  $ graphjs analyze injection_call_6.js
  No vulnerabilities detected in "injection_call_6.js".

  $ graphjs analyze injection_call_7.js
  No vulnerabilities detected in "injection_call_7.js".

  $ graphjs analyze injection_call_8.js
  No vulnerabilities detected in "injection_call_8.js".

  $ graphjs analyze injection_call_9.js
  No vulnerabilities detected in "injection_call_9.js".

  $ graphjs analyze injection_call_10.js
  {
    "vuln_type": "code-injection"
    "sink": "eval"
    "sink_lineno": 9
  }

  $ graphjs analyze injection_call_11.js
  {
    "vuln_type": "code-injection"
    "sink": "eval"
    "sink_lineno": 17
  }

  $ graphjs analyze injection_call_12.js
  No vulnerabilities detected in "injection_call_12.js".

  $ graphjs analyze injection_call_13.js
  No vulnerabilities detected in "injection_call_13.js".
