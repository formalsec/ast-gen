{
  "language-components": [
    { "type": "code-injection", "name": "eval", "args": [1] },
    { "type": "code-injection", "name": "require", "args": [1] },
    { "type": "tainted-symbol", "name": "process" }
  ],
  "builtin-components": [
    {
      "builtin": "Object",
      "props": [{ "type": "function-summary", "name": "defineProperty", "code": "(o, p, v) => { o[p] = v.value; return o; }" }]
    },
    {
      "builtin": "Function",
      "self": { "type": "code-injection", "args": [1, 2, 3, 4] }
    },
    {
      "builtin": "Symbol"
    },
    {
      "builtin": "Number"
    },
    {
      "builtin": "BigInt"
    },
    {
      "builtin": "Boolean"
    },
    {
      "builtin": "String"
    },
    {
      "builtin": "RegExp"
    },
    {
      "builtin": "JSON"
    },
    {
      "builtin": "Promise"
    }
  ],
  "package-components": [
    {
      "package": "as  ync-execute",
      "props": [{ "type": "command-injection", "name": "execAsync", "args": [1] }]
    },
    {
      "package": "child_process",
      "props": [
        { "type": "command-injection", "name": "exec", "args": [1] },
        { "type": "command-injection", "name": "execFile", "args": [1, 2] },
        { "type": "command-injection", "name": "execSync", "args": [1] },
        { "type": "command-injection", "name": "spawn", "args": [1, 2] }
      ]
    },
    {
      "package": "comandante",
      "props": [{ "type": "command-injection", "name": "write", "args": [1] }]
    },
    {
      "package": "cross-spawn",
      "self": { "type": "command-injection", "args": [1, 2] }
    },
    {
      "package": "execa",
      "props": [{ "type": "command-injection", "name": "shell", "args": [1] }]
    },
    {
      "package": "filed",
      "self": { "type": "path-traversal", "args": [1] }
    },
    {
      "package": "fs",
      "props": [
        { "type": "path-traversal", "name": "readFile", "args": [1] },
        { "type": "path-traversal", "name": "readFileSync", "args": [1] },
        { "type": "path-traversal", "name": "writeFile", "args": [1] },
        { "type": "path-traversal", "name": "writeFileSync", "args": [1] },
        { "type": "path-traversal", "name": "createReadStream", "args": [1] }
      ]
    },
    {
      "package": "gray-matter",
      "props": [{ "type": "code-injection", "name": "default", "args": [1] }]
    },
    {
      "package": "im-metadata",
      "self": { "type": "command-injection", "args": [1] }
    },
    {
      "package": "meta-exec",
      "self": { "type": "command-injection", "args": [1] }
    },
    {
      "package": "mz/child_process",
      "props": [{ "type": "command-injection", "name": "exec", "args": [1] }]
    },
    {
      "package": "platform-command",
      "props": [{ "type": "command-injection", "name": "exec", "args": [1] }]
    },
    {
      "package": "pify",
      "self": { "type": "function-summary", "code": "(x) => x" }
    },
    {
      "package": "process",
      "props": [{ "type": "tainted-symbol", "name": "argv" }]
    },
    {
      "package": "shelljs",
      "props": [{ "type": "command-injection", "name": "exec", "args": [1] }]
    },
    {
      "package": "util",
      "props": [{ "type": "function-summary", "name": "promisify", "code": "(x) => x" }]
    },
    {
      "package": "vm",
      "props": [
        { "type": "code-injection", "name": "runInContext", "args": [1] },
        { "type": "code-injection", "name": "runInNewContext", "args": [1] }
      ]
    },
    {
      "package": "yargs",
      "props": [{ "type": "tainted-symbol", "name": "argv" }]
    }
  ],
  "taint-policies": [
    // Array.prototype taint policies
    { "type": "proto-policy", "name": "at", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "concat", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "concat", "source": "arg1", "targets": ["retn"] },
    { "type": "proto-policy", "name": "copyWithin", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "entries", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "every", "source": "this", "targets": ["arg1:arg1"] },
    { "type": "proto-policy", "name": "every", "source": "arg2", "targets": ["arg1:this"] },
    { "type": "proto-policy", "name": "fill", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "fill", "source": "arg1", "targets": ["this", "retn"] },
    { "type": "proto-policy", "name": "filter", "source": "this", "targets": ["arg1:arg1", "retn"] },
    { "type": "proto-policy", "name": "filter", "source": "arg2", "targets": ["arg1:this"] },
    { "type": "proto-policy", "name": "find", "source": "this", "targets": ["arg1:arg1", "retn"] },
    { "type": "proto-policy", "name": "find", "source": "arg2", "targets": ["arg1:this"] },
    { "type": "proto-policy", "name": "findIndex", "source": "this", "targets": ["arg1:arg1"] },
    { "type": "proto-policy", "name": "findIndex", "source": "arg2", "targets": ["arg1:this"] },
    { "type": "proto-policy", "name": "findLast", "source": "this", "targets": ["arg1:arg1", "retn"] },
    { "type": "proto-policy", "name": "findLast", "source": "arg2", "targets": ["arg1:this"] },
    { "type": "proto-policy", "name": "findLastIndex", "source": "this", "targets": ["arg1:arg1"] },
    { "type": "proto-policy", "name": "findLastIndex", "source": "arg2", "targets": ["arg1:this"] },
    { "type": "proto-policy", "name": "flat", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "flatMap", "source": "this", "targets": ["arg1:arg1"] },
    { "type": "proto-policy", "name": "flatMap", "source": "arg2", "targets": ["arg1:this"] },
    { "type": "proto-policy", "name": "flatMap", "source": "this", "targets": ["retn"] }, // To-Do: Fix mapper policy
    { "type": "proto-policy", "name": "forEach", "source": "this", "targets": ["arg1:arg1"] },
    { "type": "proto-policy", "name": "forEach", "source": "arg2", "targets": ["arg1:this"] },
    { "type": "proto-policy", "name": "join", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "join", "source": "arg1", "targets": ["retn"] },
    { "type": "proto-policy", "name": "map", "source": "this", "targets": ["arg1:arg1"] },
    { "type": "proto-policy", "name": "map", "source": "arg2", "targets": ["arg1:this"] },
    { "type": "proto-policy", "name": "map", "source": "this", "targets": ["retn"] }, // To-Do: Fix mapper policy
    { "type": "proto-policy", "name": "pop", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "push", "source": "arg1...", "targets": ["this"] },
    { "type": "proto-policy", "name": "reduce", "source": "this", "targets": ["arg1:arg2"] },
    { "type": "proto-policy", "name": "reduce", "source": "arg2", "targets": ["arg1:arg1"] },
    { "type": "proto-policy", "name": "reduce", "source": "this", "targets": ["retn"] }, // To-Do: Fix mapper policy
    { "type": "proto-policy", "name": "reduceRight", "source": "this", "targets": ["arg1:arg2"] },
    { "type": "proto-policy", "name": "reduceRight", "source": "arg2", "targets": ["arg1:arg1"] },
    { "type": "proto-policy", "name": "reduceRight", "source": "this", "targets": ["retn"] }, // To-Do: Fix mapper policy
    { "type": "proto-policy", "name": "reverse", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "shift", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "slice", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "some", "source": "this", "targets": ["arg1:arg1"] },
    { "type": "proto-policy", "name": "some", "source": "arg2", "targets": ["arg1:this"] },
    { "type": "proto-policy", "name": "sort", "source": "this", "targets": ["arg1:arg1", "arg1:arg2", "retn"] },
    { "type": "proto-policy", "name": "splice", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "splice", "source": "arg3...", "targets": ["this"] },
    { "type": "proto-policy", "name": "toLocaleString", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "toReversed", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "toSorted", "source": "this", "targets": ["arg1:arg1", "arg1:arg2", "retn"] },
    { "type": "proto-policy", "name": "toSpliced", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "toSpliced", "source": "arg3...", "targets": ["retn"] },
    { "type": "proto-policy", "name": "toString", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "unshift", "source": "arg1...", "targets": ["this"] },
    { "type": "proto-policy", "name": "values", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "with", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "with", "source": "arg2", "targets": ["retn"] },
    // String.prototype taint policies
    { "type": "proto-policy", "name": "match", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "matchAll", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "normalize", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "padEnd", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "padEnd", "source": "arg2", "targets": ["retn"] },
    { "type": "proto-policy", "name": "padStart", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "padStart", "source": "arg2", "targets": ["retn"] },
    { "type": "proto-policy", "name": "repeat", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "replace", "source": "this", "targets": ["retn", "arg2"] },
    { "type": "proto-policy", "name": "replace", "source": "arg2", "targets": ["retn"] },
    { "type": "proto-policy", "name": "replaceAll", "source": "this", "targets": ["retn", "arg2"] },
    { "type": "proto-policy", "name": "replaceAll", "source": "arg2", "targets": ["retn"] },
    { "type": "proto-policy", "name": "search", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "split", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "substring", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "toLocaleLowerCase", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "toLocaleUpperCase", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "toLowerCase", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "toUpperCase", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "toWellFormed", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "trim", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "trimEnd", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "trimStart", "source": "this", "targets": ["retn"] },
    { "type": "proto-policy", "name": "valueOf", "source": "this", "targets": ["retn"] },
    // Router taint policies
    { "type": "proto-policy", "name": "all", "source": "this", "targets": ["arg2"] },
    { "type": "proto-policy", "name": "get", "source": "this", "targets": ["arg2", "retn"] },
    { "type": "proto-policy", "name": "post", "source": "this", "targets": ["arg2"] },

    // JavaScript builtins taint policies
    { "type": "builtin-policy", "builtin": "JSON", "name": "stringify", "source": "arg1", "targets": ["retn"] },
    { "type": "builtin-policy", "builtin": "Object", "name": "assign", "source": "arg2", "targets": ["arg1", "retn"] },
    { "type": "builtin-policy", "builtin": "String", "source": "arg1", "targets": ["retn"] },

    // Npm package taint policies
    { "type": "package-policy", "package": "acorn", "name": "parse", "source": "arg1", "targets": ["retn"] },
    { "type": "package-policy", "package": "async", "name": "each", "source": "arg1", "targets": ["arg2"] },
    { "type": "package-policy", "package": "child_process", "name": "exec", "source": "arg1", "targets": ["arg2:arg1", "arg2:arg2", "retn"] },
    { "type": "package-policy", "package": "child_process", "name": "execFile", "source": "arg1", "targets": ["arg2:arg2", "arg2:arg3", "retn"] },
    { "type": "package-policy", "package": "child_process", "name": "execFile", "source": "arg2", "targets": ["arg2:arg2", "arg2:arg3", "retn"] },
    { "type": "package-policy", "package": "child_process", "name": "execSync", "source": "arg1", "targets": ["retn"] },
    { "type": "package-policy", "package": "child_process", "name": "spawn", "source": "arg1", "targets": ["retn"] },
    { "type": "package-policy", "package": "child_process", "name": "spawn", "source": "arg2", "targets": ["retn"] },
    { "type": "package-policy", "package": "escodegen", "name": "generate", "source": "arg1", "targets": ["retn"] },
    { "type": "package-policy", "package": "estraverse", "name": "replace", "source": "arg1", "targets": ["retn"] },
    { "type": "package-policy", "package": "fs", "name": "readFileSync", "source": "arg1", "targets": ["retn"] },
    { "type": "package-policy", "package": "merge", "source": "arg2...", "targets": ["retn"] },
    { "type": "package-policy", "package": "path", "name": "basename", "source": "arg1", "targets": ["retn"] },
    { "type": "package-policy", "package": "path", "name": "dirname", "source": "arg1", "targets": ["retn"] },
    { "type": "package-policy", "package": "path", "name": "join", "source": "arg1...", "targets": ["retn"] },
    { "type": "package-policy", "package": "path", "name": "normalize", "source": "arg1", "targets": ["retn"] },
    { "type": "package-policy", "package": "path", "name": "resolve", "source": "arg1...", "targets": ["retn"] },
    { "type": "package-policy", "package": "reduce-function-call", "source": "arg1", "targets": ["arg3"] },
    { "type": "package-policy", "package": "util", "name": "format", "source": "arg2...", "targets": ["retn"] },
    { "type": "package-policy", "package": "url", "name": "parse", "source": "arg1", "targets": ["retn"] }
  ]
}
